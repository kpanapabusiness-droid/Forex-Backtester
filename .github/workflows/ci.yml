name: CI
on:
  pull_request:
  push:

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install
        id: install
        shell: bash
        run: |
          set +e
          set -o pipefail
          : > install.log
          python -m pip install -U pip 2>&1 | tee -a install.log
          pip install -r requirements.txt 2>&1 | tee -a install.log
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt 2>&1 | tee -a install.log; fi
          echo "INSTALL_EXIT=${PIPESTATUS[0]}" >> "$GITHUB_OUTPUT"
          exit 0

      - name: Ruff
        id: ruff
        shell: bash
        run: |
          set +e
          set -o pipefail
          : > ruff.log
          bash -o pipefail -c 'ruff check . 2>&1 | tee -a ruff.log'
          echo "RUFF_EXIT=${PIPESTATUS[0]}" >> "$GITHUB_OUTPUT"
          exit 0

      - name: Pytest
        id: pytest
        shell: bash
        env:
          PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
        run: |
          set +e
          set -o pipefail
          : > pytest.log
          bash -o pipefail -c 'pytest -q 2>&1 | tee -a pytest.log'
          echo "PYTEST_EXIT=${PIPESTATUS[0]}" >> "$GITHUB_OUTPUT"
          exit 0

      - name: Fail if any step failed
        if: always()
        shell: bash
        run: |
          i="${{ steps.install.outputs.INSTALL_EXIT }}"
          r="${{ steps.ruff.outputs.RUFF_EXIT }}"
          p="${{ steps.pytest.outputs.PYTEST_EXIT }}"
          echo "exit codes: install=$i ruff=$r pytest=$p"
          if [ "${i:-0}" != "0" ] || [ "${r:-0}" != "0" ] || [ "${p:-0}" != "0" ]; then exit 1; fi

      - name: Notify Discord on failure
        if: failure()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        shell: bash
        run: |
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          repo="${{ github.repository }}"; ref="${{ github.ref_name }}"; sha="${{ github.sha }}"
          i="${{ steps.install.outputs.INSTALL_EXIT }}"; r="${{ steps.ruff.outputs.RUFF_EXIT }}"; p="${{ steps.pytest.outputs.PYTEST_EXIT }}"

          commit_msg="$(git log -1 --pretty=%B | head -c 300)"
          ruff_tail="$(tail -n 80 ruff.log 2>/dev/null || echo 'ruff.log missing')"
          py_tail="$(tail -n 120 pytest.log 2>/dev/null || echo 'pytest.log missing')"
          inst_tail="$(tail -n 60 install.log 2>/dev/null || echo 'install.log missing')"

          for v in commit_msg ruff_tail py_tail inst_tail; do
            eval "val=\${$v}"
            eval "$v=\"$(printf "%s" "$val" | sed 's/`/\\`/g')\""
          done

          export RUN_URL repo ref sha i r p commit_msg ruff_tail py_tail inst_tail
          python - <<'PY'
import json, os, urllib.request
repo=os.environ.get("repo","")
ref=os.environ.get("ref","")
sha=os.environ.get("sha","")
run_url=os.environ.get("RUN_URL","")
i=os.environ.get("i","0")
r=os.environ.get("r","0")
p=os.environ.get("p","0")
msg=os.environ.get("commit_msg","" ).strip()
rf=os.environ.get("ruff_tail","")
py=os.environ.get("py_tail","")
inst=os.environ.get("inst_tail","")
body=(f"**CI failed**: {repo} • {ref}\n"
      f"Commit: {sha[:7]} — {msg}\n"
      f"<{run_url}>\n\n"
      f"Exits: install={i} ruff={r} pytest={p}\n\n"
      f"Ruff:\n```\n{rf}\n```\n\n"
      f"Pytest:\n```\n{py}\n```\n\n"
      f"Install:\n```\n{inst}\n```")
data=json.dumps({"content": body}).encode()
req=urllib.request.Request(os.environ["DISCORD_WEBHOOK_URL"], data=data, headers={"Content-Type":"application/json"})
with urllib.request.urlopen(req) as resp:
    print(resp.status)
PY
